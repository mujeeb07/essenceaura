<%- include('../layouts/user/header.ejs') %>

<style>
  .orders-container {
    margin: auto;
  }

  table {
    width: 100%;
    border-collapse: collapse;
  }

  th, td {
    text-align: center;
    padding: 8px;
    border: 1px solid #ddd;
  }

  th {
    background-color: #f8f9fa;
    font-weight: bold;
  }

  .cancel-order {
    padding: 6px 12px;
    border: none;
    background-color: #dc3545;
    color: #fff;
    cursor: pointer;
    border-radius: 4px;
  }

  .cancel-order:disabled {
    background-color: #088178;
    cursor: not-allowed;
  }

  .no-orders {
    text-align: center;
    margin-top: 20px;
  }

  .custom-btn {
  background-color: #088178;
  color: white;
  border: 1px solid #088178;
}

.custom-btn:hover {
  background-color: white;
  color: #088178;
  border: 1px solid #088178;
}

.active-btn {
  background-color: #088178 !important;
  color: white !important;
  border: none !important;
}

.order-id-link {
    color: #088178;
    font-weight: bold;
    text-decoration: none;
  }

  .order-id-link:hover {
    text-decoration: underline;
  }

  .go-back-wrapper {
  text-align: center;
  margin-top: 20px;
}

.go-back {
  display: inline-block;
  width: 100%; 
  padding: 12px 0;
  background-color: #088178;
  color: #fff;
  text-decoration: none;
  font-size: 16px;
  font-weight: bold;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  outline: none
}


</style>
<div class="cart-empty text-center" style="padding: 10px">
  <h2>Your Orders</h2>
</div>


<div class="container mt-5">
  <div class="card">
    <div class="table-responsive">
      <table>
        <thead>
          <tr>
            <th>Order ID</th>
            <th>Date</th>
            <th>Total Amount</th>
            <th>Order Status</th>
            <th>Payment Method</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% if (Array.isArray(my_orders) && my_orders.length) { %>
            <% my_orders.forEach(order => { %>
              <tr>
                <td><a href="/order_details/<%= order._id %>" class="order-id-link">#<%= order._id.toString().toUpperCase().slice(-10) %></a></td>                
                <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
                <td>â‚¹<%= order.total %></td>
                <td><%= order.order_status %></td>
                <td><%= order.payment_method %></td>
                <td>
                  <% if (order.order_status === 'Not-Confirmed') { %>
                    <button id="retryPayment" class="btn btn-sm retry-payment" onclick="retry_payment('<%= order._id %>', '<%= order.total %>')" style="background-color: orange; color: white; border: none;">Retry</button>
                  <% } else if (order.order_status === 'Cancelled') { %>
                    <button class="cancel-order" disabled>Cancelled</button>
                  <% } else if (order.order_status === 'Returned') { %>
                    <button class="cancel-order" disabled>Returned</button>
                  <% } else if (order.order_status === 'Delivered') { %>
                    <button class="cancel-order" disabled>Delivered</button>
                  <% } else { %>
                    <button class="cancel-order" data-order-id="<%= order._id %>">Cancel</button>
                  <% } %>
                </td>                 
              </tr>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="6" class="no-orders">No orders found.</td>
            </tr>
          <% } %>
        </tbody>
      </table>

      <div class="d-flex justify-content-center align-items-center mb-20">
        <div class="pagination">
          <% if (total_pages > 1) { %>
            <% if (current_page > 1) { %>
              <a href="?page=<%= current_page - 1 %>" class="btn btn-sm btn-outline-secondary mr-1 custom-btn"> < </a>
            <% } %>
      
            <% for (let i = 1; i <= total_pages; i++) { %>
              <a href="?page=<%= i %>" class="btn btn-sm <%= i === current_page ? 'active-btn' : 'custom-btn' %> mr-1"><%= i %></a>
            <% } %>
      
            <% if (current_page < total_pages) { %>
              <a href="?page=<%= current_page + 1 %>" class="btn btn-sm btn-outline-secondary ml-1 custom-btn"> > </a>
            <% } %>
          <% } %>
        </div>
      </div>

      </div>
      <div class="go-back-wrapper">
        <a href="/user_profile" class="go-back" style="color: rgb(255, 255, 255); background-color: #088178;">
          Go Back
        </a>
      </div>
      
    </div>
  </div>
</div>

<%- include('../layouts/user/footer.ejs') %>

<script>
let razorpay_key = "<%= razorpay_key %>";
let oderId = null;
let total = null

  document.querySelectorAll('.cancel-order').forEach(button => {
    button.addEventListener('click', async () => {
      const orderId = button.getAttribute('data-order-id');

      Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to cancel this order? This action cannot be undone!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it',
      }).then(async (result) => {
        if (result.isConfirmed) {
          const response = await fetch(`/cancel_order/${orderId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
          });

          const data = await response.json();
          if (data.success) {
            Swal.fire(
              'Cancelled!',
              'Your order has been cancelled.',
              'success'
            ).then(() => {
              location.reload();
            });
          } else {
            Swal.fire(
              'Failed!',
              'Failed to cancel the order. Please try again.',
              'error'
            );
          }
        }
      });
    });
  });

  let order_id;


  async function retry_payment(orderId, total) {
    order_id = orderId
    try {
        
        const response = await fetch("/orders_retrypayment", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId: orderId,
                totalAmount: total
            })
        });

        const result = await response.json();

        if (result.success) {
          // console.log("Response received from backend:", result);
          handleRazorpayPayment(result.order_data._id, result.order_data.total)
          update_order(orderId);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: result.message || 'Unable to retry payment. Please try again later.',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error("Error in retry_payment:", error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'An unexpected error occurred. Please try again.',
            confirmButtonText: 'OK'
        });
    }
  }




async function handleRazorpayPayment(address, total) {
    console.log("Final amount from Razorpay:", total,address);

    const options = {
        key: razorpay_key,
        amount: Math.round(total * 100), 
        currency: "INR",
        name: "EssenceAura",
        description: "Order Payment",
        handler: async function (response) {
            // await makeOrderRequest(address, 'online', response.razorpay_payment_id, total);
        },
        prefill: {
            contact: "address.shipping_address.mobile", 
            email: "user@example.com" 
        },
        theme: { color: "#3399cc" }
    };

    const rzp = new Razorpay(options);

    rzp.on('payment.failed', async function (response) {
        const { code, description, source, step, reason, metadata } = response.error;

        Swal.fire({
            icon: 'error',
            title: 'Payment Failed',
            html: `
                <p>${description}</p>
                <p><strong>Reason:</strong> ${reason}</p>
                <div style="display: flex; justify-content: center; gap: 10px; margin-top: 20px;">
                    <button id="retryPayment" style="background-color: #1c5694; color: white; border: none; padding: 10px 20px; border-radius: 5px;">
                        Retry Payment
                    </button>
                    <button id="declinePayment" style="background-color: #d63c3c; color: white; border: none; padding: 10px 20px; border-radius: 5px;">
                        Decline
                    </button>
                </div>
            `,
            showConfirmButton: false
        });

        document.querySelector('#retryPayment').addEventListener('click', () => {
            handleRazorpayPayment(address, total);
        });

        document.querySelector('#declinePayment').addEventListener('click', async () => {
            const finalAmount = calculateFinalAmount();

            try {
                const response = await fetch('/decline_payment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ address, finalAmount })
                });

                const result = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: 'info',
                        title: 'Order Payment Failed',
                        text: 'Order payment failed, and the order was not placed. Your cart has been cleared.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message || 'Something went wrong while declining the payment.',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Decline payment error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong while declining the payment.',
                    confirmButtonText: 'OK'
                });
            }
        });
    });

    rzp.open();
}


async function update_order(orderId){
  try {
    const order = await fetch('/update_order', {
      method: "POST",
      headers: {'Content-Type' : 'application/json'},
      body: JSON.stringify({orderId})
    });

    const result = await order.json();

    if (result.ok) {
      Swal.fire({ 
          icon: 'success', 
          text: 'Order placed successfully!', 
          toast: true, 
          position: 'top-right', 
          showConfirmButton: false, 
          timer: 3000 
      });
      setTimeout(() => { 
        window.location.href = '/my_orders'; 
      }, 2000);
    } else{
      Swal.fire({ 
        text: result.message, 
        icon: 'error', 
        toast: true, 
        position: 'top-right',
        showConfirmButton: false, 
        timer: 4000
      });
    }
  } catch (error) {
      console.error("Checkout error:", error);
      Swal.fire({ 
          text: 'Something went wrong!', 
          icon: 'error', 
          confirmButtonText: 'OK' 
      });
  }
}




async function makeOrderRequest(address, payment, paymentId = null, finalAmount) {
                     console.log("first",address)
                try {
                    const response = await fetch("/checkout", {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            address, 
                            payment, 
                            paymentId, 
                            final_amt: finalAmount 
                        })
                    });
    
                    const result = await response.json();
    
                    if (response.ok) {
                        Swal.fire({ 
                            icon: 'success', 
                            text: 'Order placed successfully!', 
                            toast: true, 
                            position: 'top-right', 
                            showConfirmButton: false, 
                            timer: 3000 
                        });
                        
                        setTimeout(() => { 
                            window.location.href = '/order_confirmation'; 
                        }, 2000);
                    } else {
                        Swal.fire({ 
                            text: result.message, 
                            icon: 'error', 
                            toast: true, 
                            position: 'top-right',
                            showConfirmButton: false, 
                            timer: 4000
                        });
                    }
                } catch (error) {
                    console.error("Checkout error:", error);
                    Swal.fire({ 
                        text: 'Something went wrong!', 
                        icon: 'error', 
                        confirmButtonText: 'OK' 
                    });
                }
            }
  
</script>
