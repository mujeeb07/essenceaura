<%- include('../layouts/user/header.ejs') %>

<% if( sub_total === 0 || gst === 0 || grand_total === 0 ) { %>
      <div class="cart-empty text-center" style="padding: 50px 0">
        <h6 class="display-4" style="color: #555">Your Checkout is Empty.</h6>
        <p class="text-muted" style="font-size: 18px; margin-bottom: 30px">
          Looks like you haven't added anything to your cart yet.
        </p>
        <a
          class="btn btn-secondary btn-lg"
          href="/"
          style="padding: 12px 30px; font-size: 18px"
        >
          <i class="fi-rs-shopping-bag mr-10"></i>Continue Shopping
        </a>
      </div>

      <%- include('../layouts/user/footer.ejs') %>
    <% } else { %>
        
        
<link rel="stylesheet" href="/user_asset/css/main.css?v=3.4">

<style>
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }
        .modal-content {
            border-radius: 15px;
            border: none;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        .modal-header {
            background-color: #f8f9fa;
            border-bottom: none;
            padding: 20px 30px;
        }
        .modal-title {
            font-weight: 600;
            color: #333;
        }
        .modal-body {
            padding: 30px;
        }
        .form-label {
            font-weight: 500;
            color: #555;
            margin-bottom: 5px;
        }
        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid #ced4da;
            padding: 10px 15px;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        .form-control:focus, .form-select:focus {
            border-color: #80bdff;
        }
        .text-muted {
            font-size: 0.85em;
        }
        .modal-footer {
            border-top: none;
            padding: 20px 30px;
        }
        .btn {
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: 500;
            transition: all 0.2s ease-in-out;
        }
        .btn-secondary {
            background-color: #f1f3f5;
            border-color: #f1f3f5;
        }
       
        .error-message {
            color: red;
            font-size: 0.9em;
            margin-top: 5px;
        }
 
    </style>


<div class="container mt-50">
    <div class="row">
        <!-- modal for shipping address -->
        <div class="col-lg-7 mb-4">
          <h3 class="section-title mb-4">Checkout</h3>
            <div class="">
                <% if (!addresses || addresses.length === 0) { %>
                    <p>Please add an address.</p>
                <% } else { %>    
                    <p>Showing available addresses.</p>
                    <br>
                    <% addresses.forEach((address, index) => { %>
                        <div class="card mb-15 mb-sm-0">
                            <div class="card-header">
                                <div class="form-check">
                                    <input class="form-check-input address-checkbox" type="radio" name="selectedAddress" id="address<%= index %>" value="<%= address._id %>">
                                    <label class="form-check-label" for="address<%= index %>"><h5 class="mb-0">Billing Address <%= index + 1 %></h5></label>
                                    <input type="hidden" name="sourcePage" value="checkout">
                                </div>
                            </div>
                            <div class="card-body">
                                <address>
                                    <%= address.name %><br>
                                    <%= address.address %><br>
                                    <%= address.state %><br>
                                    <%= address.city %>, <%= address.postal_code %>
                                </address>
                                <div style="display: flex; gap: 10px;">
                                    <a href="/edit_address/<%= address._id %>?redirect_to=checkout" class="btn-small">Edit</a>
                                    <a class="btn-small text-danger" id="delete_btn_<%= address._id %>" address_data="<%= address._id %>">Delete</a>
                                </div>
                            </div>
                        </div>
                    <% }) %>    
                <% } %>
            </div>

            <div id="addressError" class="error-message" style="display: none;">Please select an address.</div>

            <button type="button" class="btn btn-block mt-4 mb-15" data-bs-toggle="modal" data-bs-target="#shippingModal">
                Add Shipping Address
            </button>
                <!-- Modal Structure -->
                <div class="modal fade" id="shippingModal" tabindex="-1" aria-labelledby="shippingModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="shippingModalLabel">Shipping Address</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form action="/user_address" method="post" >
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="full-name" class="form-label">Full name (First and Last name)</label>
                                                <input type="text" class="form-control" id="full-name" name="full_name" placeholder="Full Name">
                                                <div class="invalid-feedback" id="nameError">Please enter your full name.</div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="mobile-number" class="form-label">Mobile number</label>
                                                <input type="tel" class="form-control" id="mobile-number" name="mobile_number" placeholder="+1 (234) 567-8900">
                                                <div class="invalid-feedback" id="mobileError">Please enter a valid mobile number.</div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="pincode" class="form-label">Pincode</label>
                                                <input type="text" class="form-control" id="pincode" name="pincode" placeholder="6 digits PIN code">
                                                <div class="invalid-feedback" id="pincodeError">Please enter a valid 6-digit PIN code.</div>
                                            </div>
                                        </div>
                                    
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label for="address" class="form-label">Address</label>
                                                <input type="text" class="form-control" id="address" name="address" placeholder="Address">
                                                <div class="invalid-feedback" id="flatError">Please enter your address.</div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="landmark" class="form-label">Landmark</label>
                                                <input type="text" class="form-control" id="landmark" name="landmark" placeholder="Landmark">
                                                <div class="invalid-feedback" id="landmarkError">Please provide a landmark.</div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="town-city" class="form-label">Town/City</label>
                                                <input type="text" class="form-control" id="town-city" name="town_city" placeholder="City">
                                                <div class="invalid-feedback" id="cityError">Please enter your town or city.</div>
                                            </div>
                                        </div>
                                    </div>
                                    <input type="hidden" name="sourcePage" value="checkout">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="state" class="form-label">State</label>
                                            <select class="form-select" id="state" name="state">
                                              <option value="">Choose a state</option>
                                              <option value="Andhra Pradesh">Andhra Pradesh</option>
                                              <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                                              <option value="Assam">Assam</option>
                                              <option value="Bihar">Bihar</option>
                                              <option value="Chhattisgarh">Chhattisgarh</option>
                                              <option value="Goa">Goa</option>
                                              <option value="Gujarat">Gujarat</option>
                                              <option value="Haryana">Haryana</option>
                                              <option value="Himachal Pradesh">Himachal Pradesh</option>
                                              <option value="Jharkhand">Jharkhand</option>
                                              <option value="Karnataka">Karnataka</option>
                                              <option value="Kerala">Kerala</option>
                                              <option value="Madhya Pradesh">Madhya Pradesh</option>
                                              <option value="Maharashtra">Maharashtra</option>
                                              <option value="Manipur">Manipur</option>
                                              <option value="Meghalaya">Meghalaya</option>
                                              <option value="Mizoram">Mizoram</option>
                                              <option value="Nagaland">Nagaland</option>
                                              <option value="Odisha">Odisha</option>
                                              <option value="Punjab">Punjab</option>
                                              <option value="Rajasthan">Rajasthan</option>
                                              <option value="Sikkim">Sikkim</option>
                                              <option value="Tamil Nadu">Tamil Nadu</option>
                                              <option value="Telangana">Telangana</option>
                                              <option value="Tripura">Tripura</option>
                                              <option value="Uttar Pradesh">Uttar Pradesh</option>
                                              <option value="Uttarakhand">Uttarakhand</option>
                                              <option value="West Bengal">West Bengal</option>
                                              <option value="Andaman and Nicobar Islands">Andaman and Nicobar Islands</option>
                                              <option value="Chandigarh">Chandigarh</option>
                                              <option value="Dadra and Nagar Haveli">Dadra and Nagar Haveli</option>
                                              <option value="Daman and Diu">Daman and Diu</option>
                                              <option value="Lakshadweep">Lakshadweep</option>
                                              <option value="Delhi">Delhi</option>
                                              <option value="Puducherry">Puducherry</option>
                                              <option value="Ladakh">Ladakh</option>
                                              <option value="Jammu and Kashmir">Jammu and Kashmir</option>
                                            </select>
                                            <div class="invalid-feedback" id="stateError">Please select your state.</div>
                                        </div>
                                        <div class="col-md-6"></div>
                                    </div>
                                    <div class="modal-footer"> 
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <button type="submit" class="btn btn-primary">Save Address</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>                            
        </div>

    <% if(cartItems) { %>
        <div class="col-lg-5">
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h4 class="mb-4">Order Summary</h4>
                    <table class="table" id="orderSummary">
                        <tbody>
                            <tr>
                                <td>Subtotal (Excluding Tax)</td>
                                <td class="text-right">₹ <%= sub_total.toFixed(2) %></td>
                            </tr>
                            <tr>
                                <td>Taxes <span class="text-muted">( GST 18%)</span></td>
                                <td class="text-right">₹ <%= gst.toFixed(2) %></td>
                                
                            </tr>
                            <tr>
                                <% var delivery_charge = grand_total < 2500 ? 50 : 0  %>
                                <td>Shipping (<%= cartItems.length %> Items)</td>
                                <td class="text-right"> <%= delivery_charge != 0 ? `₹ ${delivery_charge}` : "Free"  %></td>
                            </tr>
        
                            <tr>
                                <td><strong>Total</strong></td>
                                <td class="text-right"><strong>₹ <%= (Number(grand_total) + Number(delivery_charge)).toFixed(2) %></strong></td>
                            </tr>
                        </tbody>
                    </table>
        
                    <div class="mt-10">
                        <h5 class="mt-10 mb-10">Bag Summary (<%= cartItems.length %>)</h5>
                        <% cartItems.forEach(function(item) { %>
                            <div class="d-flex mb-3">
                                <img src="<%= item.product.product_card_image %>" class="d-block h-25 w-25" alt="Product Image" width="60">
                                <div class="ml-3">
                                    <p class="mb-0"><%= item.product.name %> x <%= item.quantity %></p>
                                    <small>Volume: <%= item.volume %> ml</small><br>
                                    <strong>₹ <%= item.offer_price ? item.offer_price : item.price %></strong>
                                </div>
                            </div>
                        <% }); %>
                        <button id="addCoupon" class="btn btn-block mt-4 mb-15">Add Coupon</button>
                    </div>
                </div>
            </div>
            <div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="codOption" value="COD">
                    <label class="form-check-label" for="codOption">
                        <span>Cash on Delivery (COD)</span>
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="razorpayOption" value="razorpay">
                    <label class="form-check-label" for="razorpayOption">
                        <span>RazorPay</span>
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="paymentMethod" id="walletOption" value="wallet">
                    <label class="form-check-label" for="walletOption">
                        <span>Wallet</span>
                    </label>
                </div>
                <div id="paymentError" class="error-message" style="display: none;">Please select a payment method.</div>
                <button id="placeOrder" class="btn btn-block mt-4 mb-15">Place Order</button>
            </div>
        </div>
    <% } else {%>

    <% } %>
    </div>
</div>

<%- include('../layouts/user/footer.ejs') %>

<script>
    // Global variables
    const coupons = '<%- JSON.stringify(coupons) %>';
    let total = '<%= grand_total %>';
    const total_after_removed_coupon = '<= total_after_removed_coupon >';
    const subtotal = '<%= sub_total %>';
    const gst = '<%= gst %>';
    const userEmail = '<%- userData?.email %>';
    const userPhone = '<%- userData?.phone %>';
    let razorpay_key = "<%= razorpay_key %>";
    let delivery_charge = "<%= delivery_charge %>";
    let cartItems = '<%= JSON.stringify(cartItems) %>'; 



    let isCouponApplied = false;
    let appliedCoupon = null;
    let couponDiscount = null;


    function calculateFinalAmount() {
        let discountAmount = 0;
        
        // Check if coupon is applied and meets minimum amount criteria
        if (isCouponApplied && appliedCoupon && (Number(subtotal) + Number(gst) >= appliedCoupon.coupon_min_amount)) {
            discountAmount = Number(couponDiscount);
        }

        // Calculate final amount
        const finalAmount = Number(subtotal) + 
                            Number(gst) + 
                            Number(delivery_charge) - 
                            Number(discountAmount);

        console.log('Final Amount Calculation:', {
            subtotal,
            gst,
            delivery_charge,
            discountAmount,
            finalAmount
        });

        return finalAmount;
    }


    
        // Address Deletion Section
        document.addEventListener("DOMContentLoaded", function() {
            document.querySelectorAll("[id^='delete_btn_']").forEach(button => {
                button.addEventListener("click", async function (e) {
                    e.preventDefault();
                    const address_id = e.target.getAttribute('address_data');
                    
                    const result = await Swal.fire({
                        icon: 'warning',
                        title: 'Are you sure?',
                        text: "Do you really want to delete address?",
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel'
                    });
    
                    try {
                        if (result.isConfirmed) {
                            const response = await fetch(`/delete_address/${address_id}`, {
                                method: 'DELETE',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            const result = await response.json();
                            
                            if (result.success) {
                                Swal.fire({
                                    icon: 'success',
                                    text: 'Address deleted successfully',
                                    toast: true,
                                    position: 'top-right',
                                    showConfirmButton: false,
                                    timerProgressBar: true,
                                    timer: 2000
                                });
                                e.target.closest('.card').remove();
                            } else {
                                Swal.fire({
                                    text: 'Something wrong!' + result.message,
                                    title: '',
                                    icon: 'error',
                                    confirmButtonText: 'OK',
                                });
                            }
                        } else {
                            Swal.fire({
                                icon: 'success',
                                text: 'Declined delete address',
                                toast: true,
                                position: 'top-right',
                                showConfirmButton: false,
                                timerProgressBar: true,
                                timer: 2000
                            });
                        }
                    } catch (error) {
                        console.log('Error deleting address', error)
                    }
                })
            })
        })
    
        // Coupon Handling Section
        document.addEventListener("DOMContentLoaded", function() {
            
            const addCouponButton = document.getElementById("addCoupon");
    
            
            let couponsArray;
            try {
                couponsArray = JSON.parse(coupons);
            } catch (error) {
                console.error('Failed to parse coupons:', error);
                couponsArray = [];  
            }
    
            addCouponButton.addEventListener("click", async function() {
                    if(isCouponApplied){
                        Swal.fire({
                            title: 'Are you sure',
                            text: 'Do you want to remove the applied coupon?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Yes, remove it!',
                            cancelButtonText: 'No, keep it'
                        }).then(async (result) => {
                            if(result.isConfirmed){
                                removeCoupon();
                                Swal.fire({
                                    icon: 'success',
                                    text: 'Coupon removed',
                                    toast: true,
                                    position: 'top-right',
                                    showConfirmButton: false,
                                    timerProgressBar: true,
                                    timer: 2000
                                });
                            }
                        });
                        return;
                    }
        
                    const couponOptions = couponsArray.map((coupon, index) => {
                    return `
                        <div style="width: 48%; border: 2px dashed #ffa500; border-radius: 10px; padding: 10px; margin-bottom: 15px; display: flex; flex-direction: column; background: #f9f9f9; position: relative; box-sizing: border-box;" >
                            <div style="display: flex; align-items: center; margin-bottom: 5px;">
                                <input type="radio" id="coupon${index}" name="selectedCoupon" value="${index}" style="margin-right: 10px; width: 16px; height: 16px;">
                                <label for="coupon${index}" style="font-weight: bold; color: #ff6b00; font-size: 16px; margin: 0;">
                                ${coupon.coupon_name}
                                </label>
                            </div>
                            <p style="font-size: 13px; margin: 4px 0; color: #666; text-align: left;">${coupon.coupon_description}</p>
                            <div style="text-align: center; margin-bottom: 5px;">
                                <span style="font-weight: bold; color: #333; font-size: 13px;">Code: ${coupon.coupon_code}</span>
                            </div>
                            <div style="display: flex; justify-content: space-between; margin-top: 8px;">
                                <div>
                                    <span style="color: #008000; font-weight: bold; font-size: 14px;">${coupon.discount_percentage}% OFF</span><br>
                                    <small style="font-size: 11px;">(Max ₹${coupon.coupon_max_amount})</small>
                                </div>
                                <div>
                                    <span style="color: #555; font-size: 13px;">Min Purchase: ₹${coupon.coupon_min_amount}</span><br>
                                    <span style="color: #555; font-size: 13px;">Expires: ${coupon.coupon_expires}</span>
                                </div>
                            </div>
                        </div>
                    `;
                    }).join("");
        
                    const result = await Swal.fire({
                        title: 'Select a Coupon',
                        html: `<div style="display: flex; flex-wrap: wrap; gap: 5px;">${couponOptions}</div>`,
                        showCancelButton: true,
                        confirmButtonText: 'Apply Coupon',
                            preConfirm: () => {
                                const selectedCouponIndex = document.querySelector('input[name="selectedCoupon"]:checked');
                                    if (!selectedCouponIndex) {
                                        Swal.showValidationMessage('Please select a coupon to apply');
                                            return false;
                                    }
                                return couponsArray[selectedCouponIndex.value];
                            }
                    });
        
                    if (result.isConfirmed) {
                        const selectedCoupon = result.value;
                        const response = await fetch('/apply_coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ selectedCoupon, total })
                        });
        
                        const data = await response.json();
                        console.log("abcdefgh:", data)
        
                        if (data.success) {
                            total = data.total
                            final_amt = Number(total)
                            console.log("final amoutn afrer coupon apply:",final_amt)
                            isCouponApplied = true;
                            appliedCoupon = selectedCoupon;
                            couponDiscount = data.couponDiscount
                            addCouponButton.textContent = "Remove Coupon";
                            Swal.fire({
                            icon: 'success',
                            text: `${selectedCoupon.coupon_name} coupon Applied Successfully!`,
                            toast: true,
                            position: 'top-right',
                            showConfirmButton: false,
                            timer: 3000
                            });
                            renderOrderSummary(selectedCoupon);
                        } else {
                            Swal.fire({
                            icon: 'error',
                            text: data.message,
                            toast: true,
                            position: 'top-right',
                            showConfirmButton: false,
                            timer: 3000
                            });
                        }
                    }
            });

            
            function renderOrderSummary(appliedCoupon) {
                const finalAmount = calculateFinalAmount();
                const discountAmount = isCouponApplied ? Number(couponDiscount) : 0;
    
                document.getElementById("orderSummary").innerHTML = `
                    <tr>
                        <td>Subtotal (Excluding Tax)</td>
                        <td class="text-right">₹${Number(subtotal).toFixed(2)}</td>
                    </tr>
                    <tr>
                        <td>Taxes <span class="text-muted">(GST 18%)</span></td>
                        <td class="text-right">₹${Number(gst).toFixed(2)}</td>
                    </tr>
                    <tr>
                        <td>Shipping (<%= cartItems.length %> Items)</td>
                        <td class="text-right">₹${delivery_charge}</td>
                    </tr>
                    ${discountAmount > 0 ? `
                        <tr>
                            <td>Coupon Discount (${appliedCoupon.coupon_name})</td>
                            <td class="text-right">-₹${discountAmount.toFixed(2)}</td>
                        </tr>` : ''}
                    <tr>
                        <td><strong>Total</strong></td>
                        <td class="text-right"><strong>₹${finalAmount.toFixed(2)}</strong></td>
                    </tr>
                `;
            }
    
            // Coupon Remove
            async function removeCoupon() {
                try {

                    isCouponApplied = false;
                    appliedCoupon = null;
                    couponDiscount = 0;
                    const finalAmount = calculateFinalAmount();

                    const response = await fetch('/remove_coupon', {
                        method: 'POST',
                        headers: { 'Content-Type':'application' },
                        body: JSON.stringify({ couponDiscount, finalAmount })
                    });
                       if(response.ok){ 
                            document.getElementById("orderSummary").innerHTML = `
                                <tr>
                                    <td>Subtotal (Excluding Tax)</td>
                                    <td class="text-right">₹${Number(subtotal).toFixed(2)}</td>
                                </tr>
                                <tr>
                                    <td>Taxes <span class="text-muted">(GST 18%)</span></td>
                                    <td class="text-right">₹${Number(gst).toFixed(2)}</td>
                                </tr>
                                <tr>
                                    <td>Shipping (<%= cartItems.length %> Items)</td>
                                    <td class="text-right">₹${delivery_charge}</td>
                                </tr>
                                <tr>
                                    <td><strong>Total</strong></td>
                                    <td class="text-right"><strong>₹${finalAmount.toFixed(2)}</strong></td> 
                                </tr>
                            `;
                
                            addCouponButton.textContent = "Apply Coupon";
                        } else {
                            Swal.fire({
                            icon: 'error',
                            text: response.message,
                            toast: true,
                            position: 'top-right',
                            showConfirmButton: false,
                            timer: 3000
                            });
                        }
                } catch (error) {
                        
                }
            }

        });

        // Place Order Section
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById('placeOrder').addEventListener('click', async () => {
                try {
                    const cartResponse = await fetch('/cart/validate_stock', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });
    
                    if (!cartResponse.ok) {
                        throw new Error('Failed to validate stock. Please try again.');
                    }
            
                    const cartData = await cartResponse.json();
            
                    const outOfStockItems = cartData.items.filter(item => item.quantity > item.stock);
            
                    if (outOfStockItems.length > 0) {
                        const outOfStockDetails = outOfStockItems.map(item =>
                            `The product "${item.name}" is currently out of stock. Please update your cart.`
                        ).join('<br><br>');

                        Swal.fire({
                            icon: 'warning',
                            title: 'Out of Stock',
                            html: `
                                <div style="text-align: center;">
                                    ${outOfStockDetails}
                                </div>
                            `,
                            confirmButtonText: 'OK',
                        });
            
                        return; 
                    }
            
                    const finalAmount = calculateFinalAmount();
            
                    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
                    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');

                    if (!selectedAddress) {
                        document.getElementById('addressError').style.display = 'block';
                        return;
                    } else {
                        document.getElementById('addressError').style.display = 'none';
                    }
            
                    if (!selectedPayment) {
                        document.getElementById('paymentError').style.display = 'block';
                        return;
                    } else {
                        document.getElementById('paymentError').style.display = 'none';
                    }
    
                    const address = selectedAddress.value;
                    const paymentMethod = selectedPayment.value;
    
                    switch (paymentMethod) {
                        case 'COD':
                            await handleCODPayment(address, finalAmount);
                            break;
                        case 'razorpay':
                            await handleRazorpayPayment(address, finalAmount);
                            break;
                        case 'wallet':
                            await handleWalletPayment(address, finalAmount);
                            break;
                    }
                } catch (error) {
                        console.error('Order placement error:', error);
                }
            });
    
            // Payment method handlers
            async function handleCODPayment(address, finalAmount) {
                await makeOrderRequest(address, 'COD', null, finalAmount);
            }
    
            async function handleWalletPayment(address, finalAmount) {
                await makeOrderRequest(address, "wallet", null, finalAmount);
            }
    
            async function handleRazorpayPayment(address, final_amt) {
                console.log("final amount from razorpay", final_amt)
                const options = {
                    key: razorpay_key,
                    amount: Math.round(final_amt * 100),
                    currency: "INR",
                    name: "EssenceAura",
                    description: "Order Payment",
                    handler: async function (response) {
                        await makeOrderRequest(address, 'online', response.razorpay_payment_id, final_amt);
                    },
                    prefill: { contact: userPhone, email: userPhone },
                    theme: { color: "#3399cc" }
                }
                
                const rzp = new Razorpay(options);
                    rzp.on('payment.failed', async function (response) {
                        const { code, description, source, step, reason, metadata } = response.error;
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed',
                            html: `
                                <p>${description}</p>
                                <p><strong>Reason:</strong> Payment Failed </p>
                                <div style="display: flex; justify-content: center; gap: 10px; margin-top: 20px;">
                                    <button id="retryPayment" style="background-color: #1c5694; color: white; border: none; padding: 10px 20px; border-radius: 5px;">
                                        Retry Payment
                                    </button>
                                    <button id="declinePayment" style="background-color: #d63c3c; color: white; border: none; padding: 10px 20px; border-radius: 5px;">
                                        Decline
                                    </button>
                                </div>
                            `,
                            showConfirmButton: false,
                        });

                        document.querySelector('#retryPayment').addEventListener('click', () => {
                            handleRazorpayPayment(address, final_amt);
                        });

                        document.querySelector('#declinePayment').addEventListener('click', async () => {
                            const finalAmount = calculateFinalAmount();
                            
                            try {
                                const response = await fetch('/decline_payment', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ address, finalAmount, isCouponApplied, couponDiscount })
                                });

                                const result = await response.json();

                                if (response.ok) {
                                    Swal.fire({
                                        icon: 'info',
                                        title: 'Order Payment Failed',
                                        text: 'Order payment failed, and the order was not placed. Your cart has been cleared.',
                                        confirmButtonText: 'OK',
                                    }).then(() => {
                                        window.location.href = '/';
                                    });

                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: result.message || 'Something went wrong while declining the payment.',
                                        confirmButtonText: 'OK',
                                    });
                                }
                            } catch (error) {
                                console.error('Decline payment error:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Something went wrong while declining the payment.',
                                    confirmButtonText: 'OK',
                                });
                            }
                        });

                    });

                    rzp.open();
            }
    
            // Order request function
            async function makeOrderRequest(address, payment, paymentId = null, finalAmount) {
                try {
                    const response = await fetch("/checkout", {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            address, 
                            payment, 
                            paymentId, 
                            final_amt: finalAmount 
                        })
                    });
    
                    const result = await response.json();
    
                    if (response.ok) {
                        Swal.fire({ 
                            icon: 'success', 
                            text: 'Order placed successfully!', 
                            toast: true, 
                            position: 'top-right', 
                            showConfirmButton: false, 
                            timer: 3000 
                        });
                        
                        setTimeout(() => { 
                            window.location.href = '/order_confirmation'; 
                        }, 2000);
                    } else {
                        Swal.fire({ 
                            text: result.message, 
                            icon: 'error', 
                            toast: true, 
                            position: 'top-right',
                            showConfirmButton: false, 
                            timer: 4000
                        });
                    }
                } catch (error) {
                    console.error("Checkout error:", error);
                    Swal.fire({ 
                        text: 'Something went wrong!', 
                        icon: 'error', 
                        confirmButtonText: 'OK' 
                    });
                }
            }
        });
    
    
        // Address Validation
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector("form");
            const fullNameInput = document.getElementById("full-name");
            const mobileInput = document.getElementById("mobile-number");
            const pincodeInput = document.getElementById("pincode");
            const addressInput = document.getElementById("address");
            const landmarkInput = document.getElementById("landmark");
            const townCityInput = document.getElementById("town-city");
            const stateSelect = document.getElementById("state");
            const submitButton = document.querySelector('button[type="submit"]');
            const placeOrderBtn = document.getElementById('placeOrder');
            const addressError = document.getElementById('addressError');
            const paymentError = document.getElementById('paymentError');
    
            const namePattern = /^[a-zA-Z ]{2,}$/;
            const mobilePattern = /^[0-9]{10}$/;
            const pincodePattern = /^[0-9]{6}$/;
    
            function validateInput(input, pattern, errorId) {
                const isValid = pattern ? pattern.test(input.value.trim()) : input.value.trim() !== "";
                input.classList.toggle("is-invalid", !isValid);
                document.getElementById(errorId).style.display = isValid ? "none" : "block";
                return isValid;
            }
    
            function validateForm() {
                const isValid = validateInput(fullNameInput, namePattern, "nameError") &&
                    validateInput(mobileInput, mobilePattern, "mobileError") &&
                    validateInput(pincodeInput, pincodePattern, "pincodeError") &&
                    validateInput(addressInput, null, "flatError") &&
                    validateInput(landmarkInput, null, "landmarkError") &&
                    validateInput(townCityInput, null, "cityError") &&
                    validateInput(stateSelect, null, "stateError");
                
                submitButton.disabled = !isValid;
                return isValid;
            }
    
            [fullNameInput, mobileInput, pincodeInput, addressInput, landmarkInput, townCityInput, stateSelect]
                .forEach(input => input.addEventListener("input", validateForm));
    
            async function submitFormData() {
                const data = {
                    full_name: fullNameInput.value.trim(),
                    mobile_number: mobileInput.value.trim(),
                    pincode: pincodeInput.value.trim(),
                    address: addressInput.value.trim(),
                    landmark: landmarkInput.value.trim(),
                    town_city: townCityInput.value.trim(),
                    state: stateSelect.value.trim(),
                    sourcePage: form.querySelector('[name="sourcePage"]').value
                };
    
                // console.log('form data :', data);
    
                try {
                    const response = await fetch("/user_address", {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
    
                    let address_message = '<%- JSON.stringify(address_message || "") %>';
                    if ( address_message) {
                        const modalElement =  document.getElementById("shippingModal");
                            Swal.fire({ 
                            icon: 'success', 
                            text: 'Address added successfully.', 
                            toast: true, 
                            position: 'top-right', 
                            showConfirmButton: false, 
                            timer: 3000 });
                                
                            setTimeout(() => {
                                window.location.reload()
                            }, 3000);
                        
                    } else {
                        Swal.fire({ 
                            icon: 'error',
                            text: 'Error adding address! ' + result.message, 
                            toast: true, position: 'top-right', 
                            showConfirmButton: false, 
                            timer: 3000 });
                    }
                } catch (error) {
                    console.error("Error submitting form data:", error);
                    Swal.fire({ 
                        icon: 'error', 
                        text: 'Error submit form data.', 
                        toast: true, position: 'top-right', 
                        showConfirmButton: false, 
                        timer: 3000 });
                }
            }
    
            form.addEventListener("submit", function (event) {
                event.preventDefault();
                if (validateForm()) {
                    submitFormData();
                }
            });
            validateForm();
        });
</script>

<% } %>